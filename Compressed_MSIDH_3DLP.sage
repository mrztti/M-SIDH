proof.all(False)
import sys
import random
import time
import importlib

# Setting

T1 = time.time();
p = 1368273219769709597361274767296170313261863121223178313095945161624892147773575453013830800882568840773208515494781611266527571353095661688313029420947178669464758077172644389222823513955424579975283649388588701270505843972753879819188746626516893178632403222109279527234912486013616594742627418565346709953224864640132673349864791636493889644416119880334590578050514300227470609690781620057494583934754110206593048970664316993818061536412185606242715214764838319750975090387460965463997857783028856128031424159643510505622942671779992478464899364055308005173931474159322884785907318247432596430056989417377212970660925514535808442261445910361079900071790859306156022595825536744450202545799942997356307726670364203146377008377880996436859373788041862607220137253494797597914267603689436750278653757738736636580247817115029103092204231221452166003129514794875820534131944562903358320738350504641662023640620232700967886921487726248712879151759615658257824317308559396199885043495513209522171755314727007567862411331993096230226571079236682427520266135502589568388237650068386211236202026574804729902281682948141952735176353324763302441684437064455306581861879743239279944353060407500868406905521103369125724897110320369988991951228498678044851753809233789904268935251592427048044031355033009377347649929903274420703959958517542519034651255756686891976701659298100545834367547233345125794928208649566141130733995885388486924793098778679800914382608143769934037413836148152280238071010766682019572109427104396810342128355723577934814940660767908954862121482752325371138403207450432947355030344000543469900410072884145650026059862699984508485046281647120214138739950572337478967018809220280128358065795868406275481980641717734043187004685772938362884206392594586829495662418509872619419
NA = 62215241361634007099586589945742029613469680693005826231038662799884160324126221481401568501418091570079932971593042259619704505840685214936507858630964506789625611670720492981510779666634379953233219820595838667071574789467848156829623222613007729604539901995969812177453974141107174135537411005374676014691375165980199174564049816489345194724261861481046276507922632108656126671935320796577300332975305604085254588378070280353040919650685429151219014254897990093240391328824835731938677867183584207782619508399471861893554732616905553601070313582094346894965840133769895048507907421850358955265815624419910973647665707688702121069739632625344318828458362175359029181433564958123695833534726695780921482444000552644317432688297289402352129423537185104341849013775550814112042570094686073620064768664431860718975124474194859257625924574117993563877961641868847164511350399278323495250447137

NB = 5498143179323404851784386982086195042963319746595474465098492082539713998953613090529702781933589300078107398596959478429104014177599484617139734521007839251470155794512692831064970232480402457890649090943410939759570905966349770545147774734290386178783072110587560976882547793066715034620743893015077622934578162682875820261754035204843790662605120638288802713093890615681695148708488923142045050944707516419309272119411779550538935776219335997889507550268884001691520707597140497897664791747273397051330083863778134839723923329635036560019712121038360041225951622835761572045176564818099786534783432615047227470970652157388189144742514083885046313204185132272129233122790200864071624230374120969637972242093653398213192919480294911814622993861337363572488047204533620996237442148306603797477273763858624613730198268061679940160702731056002923414205460834601004363030816249441247679630289415

string_A = (NA).str(base=2);

string_B = (NB).str(base=2);

prime = {3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 6701};

prime_A = {3, 7, 13, 19, 29, 37, 43, 53, 61, 71, 79, 89, 101, 107, 113, 131, 139, 151, 163, 173, 181, 193, 199, 223, 229, 239, 251, 263, 271, 281, 293, 311, 317, 337, 349, 359, 373, 383, 397, 409, 421, 433, 443, 457, 463, 479, 491, 503, 521, 541, 557, 569, 577, 593, 601, 613, 619, 641, 647, 659, 673, 683, 701, 719, 733, 743, 757, 769, 787, 809, 821, 827, 839, 857, 863, 881, 887, 911, 929, 941, 953, 971, 983, 997, 1013, 1021, 1033, 1049, 1061, 1069, 1091, 1097, 1109, 1123, 1151, 1163, 1181, 1193, 1213, 1223, 1231, 1249, 1277, 1283, 1291, 1301, 1307, 1321, 1361, 1373, 1399, 1423, 1429, 1439, 1451, 1459, 1481, 1487, 1493, 1511, 1531, 1549, 1559, 1571, 1583, 1601, 1609, 1619, 1627, 1657, 1667, 1693, 1699, 1721, 1733, 1747, 1759, 1783, 1789, 1811, 1831, 1861, 1871, 1877, 1889, 1907, 1931, 1949, 1973, 1987, 1997, 2003, 2017, 2029, 2053, 2069, 2083, 2089, 2111, 2129, 2137, 2143, 2161, 2203, 2213, 2237, 2243, 2267, 2273, 2287, 2297, 2311, 2339, 2347, 2357, 2377, 2383, 2393, 2411, 2423, 2441, 2459, 2473, 2503, 2531, 2543, 2551, 2579, 2593, 2617, 2633, 2657, 2663, 2677, 2687, 2693, 2707, 2713, 2729, 2741, 2753, 2777, 2791, 2801, 2819, 2837, 2851, 2861, 2887, 2903, 2917, 2939, 2957, 2969, 2999, 3011, 3023, 3041, 3061, 3079, 3089, 3119, 3137, 3167, 3181, 3191, 3209, 3221, 3251, 3257, 3271, 3301, 3313, 3323, 3331, 3347, 3361, 3373, 3391, 3413, 3449, 3461, 3467, 3491, 3511, 3527, 3533, 3541, 3557, 3571, 3583, 3607, 3617, 3631, 3643, 3671, 3677, 3697, 3709, 3727, 3739, 3767, 3779, 3797, 3821, 3833, 3851, 3863, 3881, 3907, 3917, 3923, 3931, 3947, 3989, 4003, 4013, 4021, 4049, 4057, 4079, 4093, 4111, 4129, 4139, 4157};


prime_B = prime - prime_A;

prime_A = list(prime_A);

prime_A.sort();

prime_A.reverse();

prime_B = list(prime_B);

prime_B.sort();

prime_B.reverse();


G.<a>=GF(p^2,name='a',modulus=x^2+1);

GX.<X> = G[];

E0 = EllipticCurve(G,[0,757098303104940108285058773034422199096127934252739167545886032444609660274663596294987591904643360546109608756345310013310208059320172658107614517789783093689924898179431083692418013767465649012136349558955545416531908397020039325270135100547052817419456794700625313017177240282227377130742433332104228025482374349345406325750569316002448573978664252690227614696111012065047740617045249248767715362057127026129428375390123019572283505392834149280722772234886558094558191255828392047390876592175428787351743026779666031830035917163833376564373010126803976251450706042057998510453963685021946223308565118199303808606430061622074077719528331371171895913130310749070646047443372785327539904605124503271837307498851247893565512981341580236653169009866282367331200495058650444174535147724999832919679400106804791555385184524560416024066964619389372751010844647304244973383891814358540685994179133358761815954886061653912202059948841158589919684134954123329947154866350898840803223203638104097501194040841680607725339710975009602499030931837660602183280150823768604895753921081255924720547846153967006806770710199105078722950328640004644997728240428201324966819449564595573243245193743826051207118244578169570042395443787286034854582691486556647808590395688380033646610610877929010899648323065576815605139702130835585789544750558865180750187280403118407362050099916502128746114156253448915958398090487493876922169575553367031973733219822803157787110905039969049808733787791247089357700680961509955447986201899380603640045940837837604139368044230873582947320576907592479709764723991005500347026544425287783413514401685468535267987454091674512704220967207217714119034484251409657429732116798440204621473231573939178490199947618597845350547051809349004793676960506449949268043849923249152042*a + 698477134606605706113554991682090880375047196864932014208366634132536409474145713706771413842455985474384352867097354308251753962252085555296827595216771428985802619921179979479521584498705698155125120003658159017434917937641220395821848532896102078492304226874617014090098952229744438700137963872871126268475557086744023057335069996922071201125756121584518653462135536188164754969046895149955762388648847028494187766986622943987050193196953285005533661272679954864662318017421902675728492542546708917594501926451561621433649008487175633417117938847171792474672397777154937255599981483335706464322918892206119735756398490367724458556598853679979935659426046714958277910431872933468961628676154956019348887972765402646418088551370965492154102953411663072294698248084419044890575108796304402711611577793867315204808882514992838098711551683644605793140570338092315284794911642820067863760638381395809379753828974255241970003890191993563276158223537004013827203685878175467057448108191089143231207725558626510528524140127797216684018781726829922557217960216959140398048434265452348146551487597124020141107890487897384384673097856853826307584097559685170066740476070684720288369821866059506365269947201812370855773501637602268665757297305301019026586931045777044696675225658352836079733181555520397820905550746710435985502084361089739211972194684334402674984847972978699394097154570979137919277826008458014022796032451239688853528411775241114500009119335409217241153952320381958495382950761253898772756905460396877569212677792189272317162041648166802283507486095430794654229354738567370675942750344681792224882209810814838938810519633888561831560374197900020638039867024343240410562617550915234156993724375935952303367878318004736336764049376636496384661409327915537785219705166705578476,0,1,0]);

PA=E0([1173100567894398966768635139219646341325051893787133501846247285459330460290516875637053413393548390637542034736245019154391954746124753330668608529153179402444130131200849717703250311354936369454129129214933226323601135871994752695614806409205484355899329258596981358203636909071034156214328740938470945150924190280172119396638854466928769755773628995069947376114327342291242840800443906802675718872090062596629524391920210093481775647734375562746944203998565948134323745979389977238057204991557312549522428614036009178501399076142623994475007155981347905753416225357100314751546736406558162665315186835887548869942259892746819003007447013638847653743464977881521103297056269694581624738928478963058587635655952235811440887199564931700404370063949084111322326707611713572874173842731119541045215852330865362942555214183069552697925391869676013194147766617310608228780076175538592202059002107164635256543764207413977792457290523700105231839511239161899597433482445423936307283211664898948383578132125926271200552849207666300623912970956151129886617626558431428330979360892973133669688585101948259672396368078059493803072180614207289795817217081132198434427394194431810631699260077301209750581304400005204376363686389239396930518134083438515548422396043515882320621989132568159813808747397408154391696135709753115558556512287433317195877376221359686237263385115239139395033384085635870539807953066161108825102926964535877818542726993806213560046211420954944987026858260159143232690046265642252900132421853280529661550668631360335542070659153779154419061309550733074077007241157003587467110648352694516691592367532053764270430108331146341881508194074909418970570223448738342423508803167234196933874390358026633451108078756493512544266547446341295779947906512437633264394498693744919482*a + 1122533636847670078418843639217712308104610064364924757691769416686452347612162200583220876698828658521528696952689001455493139055033575247570865751552511525299844697147643461629855097465678122972169964272490165696256738678600823977875938244000347717415197371689664277285928631084835203527381144313425883436060162456042468273498327816857525089721007805616789977721138684449124434270904596979473192717204759691361488808581882128933152616594917578087040833324053154702267058092099396157622753979118266663933579447191551637181052684152595873052207892818854980995233884595005110707111902693710393286750917751337993909442230133230828474542391788652921406821324837637701217497352048581215962439905902057101047254905374571412165143042645291411435484627169342473596458637547746958337460439803655753998138838280930742703927726820007911332811624024119625534598286086700005560416502406163489735007490334206804249486213219732428149179646825115693084199554149428018302502255842180930321375693386270291474588397224101206351250817949436876376209231706550546386477366046464990057678028214083700944330732502527898165939417067838890812089065415547912363324095755696484408192491450065809054828708629785901274687027602689660248293668229391842400295794076478714901205432870517070819644026205271960807455792924996932521708027602258188437705034266887892659590630453701865296864686237186539541248797607650262217810546597544704207504451317254586491878781981745322310187884022356503049313026966795601374159432170706670764215480031350647299407242071863654595845867790398709788241448027161140370740647485634507030022880966524615750817490615657009219289317711655023026393507135329680250800396793790970871298918536909254131533384948637804321914806894528732029401090102691504016669293118017160096693236639241187123,712866737410944829978426484962019365146760784341742394576129557601151603923122220966305872395262379569969507481321271518977620833562888507225101559970581639885267376448828106064979322759246202357494734237058111404289184547916186548386657958832043184159356766627320464555666811360481747101972572401700293961901021569680720995922478034986294523138774912261060820727039469430169104150497356739612082926985105358713249592103709377114052213180631063444627606056959869476330971718531143602761930687377805601696375318545991138111428779399084986753865748847260754002726481047527993611512102499148737203019161500619370721335113662223772063623459226129118149911383049245138031606246923949161194051621119828243047766704837754532127531411796046906421915056939003921888524493674455520308119929348877875665072903183048301135220247943309238580888629152115791078357767009819861849495951310935012917759032815646735783922512878921656633740611089995653875876636239020578196216046524874822840312999147011211409683764380257657352528629426051079679587875090813814309859507600048563723257482112431096245287210522691019527524743101474466386945804126151302325805009376419695005684605685436376492716163726982299170793012212825065873630848559955453504332708195800624088855419916903320371088390447810527775709122825288946069387134018537705679510967661719249338127802528768190105207846954189837717903266397292540452819499992366317677285687596044812654572501095448025767220474415917954374929036326303135184953550974255241332936459469566044280403629726425030462131895958739056663567143194220281280314191222460931677202018481240194211474509860862213473773097771076680964394084741258452501770081400268934695566315484462536826610876856131175504450353166729615508705730008094472467365498367233822500939352422089984813*a + 182118939795472834852554222694389005673825308326808855937344259442585347847065119112741781444567812447720530069505397733673983682022219952097191960472752302132875282198895332957432949665607585460578760285064137175359758908930021627951580666417753003593623076773973713346765998579055037064310312262632220938347100113800129007790606133160072732883417972123639434995857598538156049998821698879354277252388461545211351484799384726028402267271775743327820472846093487919279684910300663868333297188810458378857426153590058412763803849816401346942051999483015016519652466700548049036332283004707863817571503455300288463173993026265254052894914781432497813584361227856386818321472166055517660625702555261366253428939970466655095613023965791780086059855664116404615858196725759060648683530408831877285294408741916119875562470136605718200139586624075206723988893845660010923908458235046740924044021791245143027294062090366312032122634862849649104884294044503310736370454559486072386154909570596135268041944277679777343422049524101023319570101042287450146543159985119773815173390687838016948082973974591584258226269829050174791249796291726003152040826624547387492032653392821444549370869576342169798865613049348510656898345986565021349631938610636592516852701379408010144292717564290730790871951639417653648973911436570881448767740244632150266123313531960420420420446363173283428465470257280254734154084345867046594513002933356392258509422718344568508872855265393033651552954349430633915714509384931374622845332111057961355878485965872195511022245782611236393391507662116584755608494472522295435314592785906259447929459172726807469936710306553912481353571332192825884493456769350925361376293204394881301623791849404729124050870244173616493105799333255135309664645276465942378045934949544632229]);

QA=E0([460086698727423618854775161200370137579551003117364582323210898784760563200628692445427927295101586916651430596743593195551348422688497205315665378190846221216590287685206224712307304920222676949744395677448169408323220680014814528945121019950484534865009621567344605545608726396501043196434168872019115825519416740405072416353987447101970684636242000326691342193559503893799700680265830409197503156385645848309366600100879614733314112231008733829439491716773959757526787473409050421036132906511383472746831546294914067111869414415845309788673316236552258121562977347816214183296608156954426413297810560139768045804936462245402052494817473346757835396987926638006875326183508261350717269792316590210507829341889046709896361367220190134599832794156061248413172291874612783446142383680456917559598036878547954236413949774208600737530591328516748299513148125016200202066847830108076348574579668135454699928483303558865722130747977841584785570003847811800101390154892858849170064488584264396327610341327251490542374212190812877084701992582974456770792412626035399060821144929483932620385310698708453507159421846746558254865584341006966874721097719964600770242368926407912293735604386740025665341177984290735634948350188737955699023108144251527385588203792628808068427302732290851974999892571865061086866318245849997233865757395351651053315920461191951198998241859470863067816055914528036648488312916405947758760248449916582208619837840251771082343289291975345294901026002593073474041134354714970378911840155191762584699512903843206163313311772924386032652645212435768231680564289086118446810793197762337072431750219156853285212924471285631089564842950655713523441546261890358621252988908877281477090842943321433522398309612860689405615433986356265448619200629564926962221944238884604560*a + 884243303088540210944330078198786911007472368487330755919642309291042501116299615214822371406111395689856498605349559290770109360649675017224680358620179331738643768000546418979025365240747209445097040591329317842953146741364560917459778348234813899598748137056553985492883633806536619367241312806889421079259634555737477517814397181165211120329048483052824453979202885976762340951126047640772050374094404625422800134047110211641485359965277268489327321266080730129980818719472332571735716775055114589936610689817619786391640073617388073594070615424185749514011357646461165801248334041574780763540383645795651743491280763184698406787695750936816831719821951637712083378941260591364435243582083144260119238172457240533217747589929268574579635305784966264662137183479294529191542100172819539811547340028509675498608209304486400358415035122910810144963859912038183421516244725314236156105780371332146652051753292549050779640657363004068135520920146423065649194316327727216492957887102461070112787586214576845110742859001372914113188070083106091728018237830443717554672940965339400798636117729155679434404320518843874827154221031011774554107205004031670625130174886923066606972049510735193172620018727214057893384170949658698139205962423359902713178896867513389370337374915042456360021909032640523913540665966904822026629419453977560439762760502016926322715621344809361689760209966952515756704492974046151890491490063386652265558562038121087411264467537067719302190241396623853875295953236410015138579353887585744031524000359243006082226757695749872596388415903612593446207398272825145872009647970343907623742382796351046996417858735298191792490422881743605793192942601089882451263624316299240004719904962033823600371639063499051129589172368188992778870592492179986774526605983135470632,302838202877205105019262314545776790950438550478579016539729126371460092102498519612734170711324608988040286447187163575143723495829170833295653892522468749840158946211656266514140496477036977663568775621500026764157481323762136181322371111693683417003772615121700732509346631466217057597892563454711192692362814793839904270669400705959613206614589673446128144245977283143262737906700681398087684979953294149410836987247965835186532157445774014960943980938899830623652777372062161741159143230443866965327362853563611824706548897388763059135375978467133162223836937537998695829937060086005755575004603653470761005196888452034871275728455643296858570959337612311595110483303862967202593872232653203418268680295532660080174067588575799212799956513354276820596012250794601004141595605118190098242419133412160239166515367641373160463371493049727211648227922282606448708313046003092967816687387956315773292057619340263326146613647860900337780209322459969446548344850245789559917124438764809806985292212439451008499034881806409939474503007660594475262889403029829949979827499540452957533722202720223950564262459610468698992550874297556237640378427672697269529147369624244555893711077832482070007300372215758606202361382836186606508073108377510444728314099715184192729738194006637091932508301581056533848869953641793391884782949371901697073782710618925768418718859462388203639276572608056292511751877614348290819472685140572220509342006014903202166658971297722162688801489718629444174438865997983594147582232781895411818212533305240631287294803836838596255028584497920241280371704115136913455995690285182417846637284823383292291917560294589141846772197090295913411444447580883472314787287586779481937587008433044774204400405505860137826380434804327186728159470099432492551181534480680635240*a + 642594067856374992023838973262040073112311527866606063208775628140927082382063095838173306189889534160149077194540868431998764752424960094237047454802689946212931281539240525240892022912866491395643255908916947092120992072262784840739158174940211586726217347541687216448495536226860077678164713375527468344943600684865933052346196294872807869081672100160546465677022314996617548692528967640783304187150075957458686175560045290569126212268249235428934398967656494920787579859557686813254903743067457388835589766882427849619371736535394991135874659417760676869082531951751494908305524169983896156539450284078539027351907525026683829960404951363760929005334597303061415636460513904199865217612012552992983262258028471729385191331851246266770483060386650885300158948632139022185765135504848683850870145087950233671322268283233886412252004305182844452075086686747702181738828226435215632762609440364817868092021879391873735190070871172981053823925836198665555575039842744983871504113190976543413324588011792802203056178275989904544644855101411501660805660008951440189935440817537361128971981894447601750929169410323330568812648034142153351399706479173717773526265697010857909420884279231809419072753768176392848171139357662169141914560416075967659582458251368362325201988613806447381247930152491348808915730660649059722142108932337057859927961040716879675531728234473098853640607573374236678735517742722412293339678780261836839438051415526645847835938694590806985042017774779439900017921596613895572926716869131398096565574080072256237101459389360980654781081928275122070862238420093991413310551930678143053988804950493541422630763430186823842926558136920522942317159643044057763086794818652431651147817356927985348946959293886663995323821123404959281691203074643991849663556836472907857 ]);

PB=E0([818375438296373042886852086719122336435247630945735307859970040920699789300509804653565824022604090318495918655130314327502545485147693021576614809166257753398679736220839364571587727149898112166782285614707455308895305077709696491923141781252198269785256287311893984555636451750443721033749374055769139696753267411253903171695655433286741457772716752562804425250679269789283893267821339065755119492303416100068846078010081149083509020268956235659503307895790559548571217140644665131879285071778164140933027546183923659085856716598047069641554681800161122327278494176694708756529217904183341130894608027369503091684129839607020516413604743919164596832324730339707219084176016576062503979346864089917090248807877335530106676106797962118723482937413335873817962066923734664134542892351610952891089628493290974104040682844136739690647832945888254688483665144521333757488348948480071447892128625680321682197341383555609608248308467896617236402755353991653171322036357997039186504887502244028705046624116232282941068176453469684078402869125334207721919408209345109795200522501688232572643120256805692933019898594225892196860146175904323636162301398897706611960265768478988375203645061182991107892291349347745037725806324441635845615608651024943012853675475536286676140681955179991752198962543854432142591789449179144574633834755193425336163021259017779358226973864951044908090831860533862601385628232641723339352933404565645872667246448752223366336634920320224663632656663162775239546478444465939969300915499970420441996946336652288460618906447885225774649028436094115915472272171086336078106014218873894019749133737016291943276535113563416495143868736502788109754324766350588968183747861106864945070705189112324842428337475963971521150469123430699712761906607789376275762453247020398913*a + 938731821614354924318522926892121480954143141221791739714582238710656632374495138830887194637342900173915046199938254424329472734293523606087917714765202168224657673904667437947706440189237612308174150214471814089387260093280682693303780464858534993509792768396042280693896859000791183208250242976335770038394701587677832458572032149464535965979102109311534426663827978720139923887127164715465242837858309760234093276831236702420955123878367188338394812307982444535842943988253687176210236625932441865839090095935224396505054011021687232921681659104611783400097086699842203037609305508267751131629433246709451276327827731825208342843907336164954401641733275736182030651329157321176665094295641938150214186310217618374870697731481237632901051988611939712812968331966382711279139969221863103345522661328092503542477426659033129692804830023126364291526505091937157964295324740956980365668961403451295016604369835104948911126492740135235462427237361424874092906331925253139992003677352595452641383395252873028922353263330878846253280425663700070616172400293417247121257318739362422497872298299290372438146244506534610068244789847304335005701874341041525694512861666453439225828177770690157618024674416279081136800238601829257453079957178404162423481385747456350809234592758046331059175343231024304310354013875956053113129346656426190260621579872506839091997599824098252926591693931358173873954491321483744804450294872349465510293601982670960317681424587699336075710707383263176230389121633190339649726774133256930169806417634615574546671060792326777005499795476193128450302864541556148934926240896971441771073956547851820773111371520988401200599692874743103191851694043530526957062177805441930023357932260353769223888782878533798305765783963278946227171659870868922631523723355968674148,535954347942799831791618752423706916283478744707430511063223929770601744426253397600649285623414105324290348973413041454917473757502175500884008222563329930867034769848067557000804299183373371308722797482116679954682294485420593203706224267347929017397432361350794556459241007501849085168651262235285730197577562891111689493922713649319873211777323313610201664270555573201537203824824045539248740973677153961993768571144700951140731587778215881123384714520242094266375935153138398824029743598512866045889658984663847010096482576186524480630804325062579178448254342124973148202534662480223862977158501374377310710803858140903801788583514265494176871855215380366343163218275600260898757314267465164174494615792733973943604602873341244150575549913763280578016911252168555705618997970991902881563481515983200974277188734411142029853575316872672834570380963515687970744620325638491471523326365109983048049014989276297517562978631858869640307468815550888884015166772997340445890473070496642122433149575682968976806007570928869372166615456729311638108421698201615477863813709911981623130029231782559785060953166469096295078918680583404829051164343187134360314461083096503093737613469100759046280007485989292883671827423028010610511177944476964554831572338010322753616764314667714890945801184484792242533150395607329524089084862009868463465768527963592817023666109952201354609291427168932850888099607470521129047878972470926694873412593258679446166845494949385031561950207808834013352761885538801690048309343499301408239508418267983716270579379245311457362153237737733150799719846505313041075346858176974416202747658269232602112432645783910521772224651613563353299538926481853055869972184987143438761970526587704197089971032528107221694224920944448559702888430485892076328343770837518778858*a + 366686968822492462756080488517930318509553402911841724656142310678438724375820609616967691798936615000885458211458603133969311242563645681616658876902797377844286623590332015440028326914441143729464347323929143925981725339081896713243377234742576782470942997220517196347947833686884408445024274096417375824452019914440504238614801052133539011988158786920529551979097026257370628974392104358783135241772373003259212982984175199005765419990427881472279914379523321982843460883669400713108402218582533991787915045432002883788117957826559309887413723033512486045539727148516361568952519537617450106072041072750034818296420595650721009135269949679757539434637062311419893933854464860785123481517103725636627047260573789299733765948331547793894496929023485752260740601183890773985131516940562878402974611533845253561908107358327718255522681808118009627711808880399463139852089964609612804855223391492633789911374198715231368804983896059869321979957781206411845121985573053777865899552755421293882277117848153710279055455755649385971779630114452935670567738128861699784205576941104687171457612335513709391137554969022763716752028589610201799804450203957338233478270490811308643268237643712847121778868714628164362492715754886505850814145919233046186133650108116758765656538106935956097379977777218495510788490422423023566642897083508636628855626576113599091545866795437958035294588424310936817691366853055726508342749700073124084523571118016593166314244168652095701772101562012418093346906306323051027304662704803078218603148975381941552590954730700248437001824003178399089372359061678537804712334380560363133711607967655490867780361469660944729977516475193676608137612256492960147918386347233430136782181627250257022478731486124820622566909297256208912215835371156576596912998831031462930]);

QB=E0([874259855673297583094385310639715465589059603524725359515458042758849276217384834399799940924645552210247259717120945714274201821375037901527851999097176255910928060321225405462848222186945471002369729690905964519124222450718963158710810803583674031043648702658932569264817156400450171623862554198205916159886474146678469897158048663582263300792393687467840188022298686101403665594048850312915954896841245502752221467293851626028549605866022660014835662370816725133905377153315827032987762394634490852912394352536914009793423414404605120835607518903804196416325142016423852358131902305593459152724827347164151447995343635317369417380464557952693414118798792263180055829831612134482998820065928834191916482534559198948257736741517216809012381951938817454016506468205457682072283542815823388738835063174739552708270615337418946570360529375655367356531775054092208482159996905109608501527390673998613788681834603071578525580850969773942000830433984576048366619555652095698745573101157894990458081553669946055145938700587366738921288176518778701156984874420441554810561735480472464927462383649803724495552638689230349983999284522161431574273853396987626850989769414644770846283613752440156285102968331401609483508419133413232457523495579951103601142096363922428640870838068330140469176705235599038252712777689194347746497577363165028113184274567122475205107272977464357442041510580633489104095545754962325870792064772308978193330510203943568237077912848918691282495571822869698815877023473852119483428772015590164679733894688340893616567430206586804504857070703067639676034890227798848626328454058864034954423830448291888890404383205512579950858112446674474489079826506265170309441979188581778312093892916425474237244447404310686017708561713340227128870846066304881138976714161404426188*a + 158119637543736540825281329515558471185296815818569268936393440565962293194244101444417177174773442945508051762699656375142332921507227131635667719024952516686335126848699251780846874517136781055062317002204439321209418811820919659099190302580115243115810484262677540597838054644722433919337538336434349221116535771297753890851533086436282786262156222939890566247684328478538163376805297438615719944299465102436940566197225558609015120590561774882737176665767930144929209780104967624491365913868787015469780961697926011608994652064780646912210713891307743471474343166883530055033865445574777393080443825284712978614781478867494162980118924388916214923726196124459825889172334527981622165789726136271251627691758092943818983750729365077548640955717121932640147726293762158177820349957209449353000281316526854854261352807396228330320177019850344968156433527419005376797199905064317201356233455470970339984616511943086439964306569685794168818240564339747134332338670415492484776609290852698720017047499606003864727993225001967271513952424063038775843655663072980198704871820032115181848987225654872027082988695972765666949630545899806571820737783342821801424681634431591264923748274768150273290941872759762532873368257153555479829746532930584864151568247651085166482942809364032899176536404985172585698563884966957740111119349420980134059596977813580625778975076589230534529829285316386261275389815318158737681454636387993938795794193200430835934906209554320188259194633634634651677577689089460698579552921637573339805974255351370265515775974301078465901616977303961991036633786911390004980897035722931136722632627962838542446216064897350703873806647749227998519806315765151839538025775445533411494900362886124181661757809011484759592385123420918832311103444578257539256162526517396626,1045927488133334560396011022321774289145865395179718824081916373155584146698383261346901089736866987012730336539276582789303456860452283210464763309127105500493796949943991780254987487573750041474628077319339123379340640473109528395010619809540438256849701436170765143741217175035511158223526796529795479119785419042439330566968204145231655557414904811402804483557585164924987845560863159292076683925722803084450978968695360873289495725065123266785855358281742154222437328627481555736572974579191462933816189747420400820580119383929960160328463905980436939687071019531938370936389818461872128179588963575382154800321845775122483107978208730392859431389682344071149154400041116907812505894045038284338319390547614836326210617155887710561398079983262311635963192363723011718209909203148845569706299467336089573916409656582595468569409690164630462604882068261942471568492884655667728476104982724478655983648198547125537122525844067557679677906570470861274006620738973391540828413044784370487770274878177354511752648945026918300244941244928638122513380641836484952512618968310832335736479834920286684383752081425390645086735951252878999359016399622863109127500519414149416504667108392444278332686336281583478286620950630097342666993799903707821091530875052488670259514555944812505559871168769422177259372531952281634267076403202183562480681878248071466238009207136497517939238465478477605874540532392577878236027812893722159724922139882335813593804320957243288260467708499688012427851744948377314678961638932614900712478264543189514166002771330382235327609871220981819852127298170315302670542647463270837703930162726972118676762558226845387358613329011394941040359719370619932288144417743407815583785401045457957948539603751049357787339449284806514298747079078228405744074425641213705302*a + 321234018034695978438658643248083086113999826634691532349456890734916733383954246170716030096470187139107305496239837553673639940926979553273556339232928875861757576656066038987895818443636957526644855090497085632930739065837518709434383954070122869577702128498072971142355802088293314818057704524740929706402716727065171500334868155976281077597911637744951685187765036426111815314479731651880268746855928045373944133994681225769512413531859623398814546215996791444625198496143583959564007849302845632403996435737808412233485112174055389205481294157708495582635420276008587948061662704544387717316413079799162348325682505330130609580823230258582582052442236544003601546360228696927590467598779145369172597465030521618787100155719851444061484242156963280512940266127530828700521720423532778797846330973890774172389000087805506768468095139205604719283009040113930770897814114683696284566796935372076696128390557035447690491803843915983046789686497999972454297752393473520015864852180281635142239419791131987813870975638643720638361181289640730245977509215833936745058820720988488769319775079068261142202886567466906616041116178220956479664003317563648479207089811091159571212603723590041923150696963871079727598330343938005518972696842621596852515116241028752902599671931445968790427586109151991732348764878463773657425556637589105822580691541742294162432487150865309171839633107803153033632868730416415791695864344533289959309849836734890858544402353518160504838007038213687311166316224952046017204284700208090147904661840534176474546292292880899441806908313286162560098582369374420640747307986569178420448977670513513319367503561709484546662933253821844877673853031985957142599262049320688773512648185526537180592720532849939496693104438274571051667649583251144198579305559454233696 ]);

RA = PA - QA;

RB = PB - QB;
 
print(len(prime_B))
degree_bound = 211;

# Square root in F_{p^2}
def sqrFp2(x):
     [r, i] = x.polynomial().list();
     delta = r^2 + i^2;
     lamb = delta^((p - 3)/4);
     rho = delta * lamb;
     if rho^2 != delta:
         return 0;
     gamma = (r + rho)/2;
     if gamma == 0:
         gamma = -rho;
     mu = gamma^((p - 3)/4);
     sigma = gamma * mu;
     gamma_inv = sigma * mu^3;
     tau = sigma * gamma_inv;
     omega = (i/2)*tau;
     if sigma^2 == gamma:
         return sigma + omega * a;
     else:
         return omega - sigma*a;

# Point doubling
def xDBL(X1, Z1, A24, C24):
	t0 = X1 - Z1; t1 = X1 + Z1;
	t0 = t0^2;
	t1 = t1^2;
	Z1 = C24 * t0;
	X1 = t1 * Z1;
	t1 = t1 - t0;
	t0 = A24 * t1;
	Z1 = Z1 + t0;
	Z1 = Z1 * t1;
	return X1, Z1;

# Point doubling and point addition
def xDBLADD(X1, Z1, X2, Z2, X3, Z3, A24):
	t0 = X1 + Z1; t1 = X1 - Z1;
	X4 = t0^2;
	t2 = X2 - Z2; 
	X5 = X2 + Z2;
	t0 = t0 * t2;
	Z4 = t1^2;
	t1 = t1 * X5; t2 = X4 -Z4;
	X4 = X4 * Z4;
	X5 = A24 * t2;
	Z5 = t0 - t1;
	Z4 = X5 + Z4;
	X5 = t0 + t1;
	Z4 = Z4 * t2;
	Z5 = Z5^2;
	X5 = X5^2;
	Z5 = X3 * Z5;
	X5 = Z3 * X5;
	return X4, Z4, X5, Z5;
	

# Montgomery ladder
def Montgomery_ladder(ell, A, XP, ZP):
	X1 = XP;
	Z1 = ZP;
	A24 = A + G(2);
	C24 = G(4);
	X2, Z2 = xDBL(X1, Z1, A24, C24);
	ellbits = bin(ell);
	ellbits = tuple(ellbits);
	ellbits = ellbits[3:];
	l = len(ellbits);
	A24 = A24/C24;
	for j in range(l):
		if ellbits[j] == '1': 
			[X2, Z2, X1, Z1] = xDBLADD(X2, Z2, X1, Z1, XP, ZP, A24);
		else:
			[X1, Z1, X2, Z2] = xDBLADD(X1, Z1, X2, Z2, XP, ZP, A24);
	return X1, Z1, X2, Z2;

# Differential addition
def differential_addition_Montgomery_plus(X1, Z1, X2, Z2, X3, Z3, A0):
  if X1 == 0 or Z1 == 0 or [X2,Z2] == [0,0] or [X3,Z3] == [0,0]:
    return 0, 0;
  else:
    t0 = X1 + Z1; t1 = X1 - Z1;
    X4 = t0^2;
    t2 = X2 - Z2; 
    X5 = X2 + Z2;
    t0 = t0 * t2;
    Z4 = t1^2;
    t1 = t1 * X5; t2 = X4 - Z4;
    X4 = X4 * Z4;
    X5 = ((A0 + G(2))/G(4)) * t2;
    Z5 = t0 - t1;
    Z4 = X5 + Z4;
    X5 = t0 + t1;
    Z4 = Z4 * t2;
    Z5 = Z5^2;
    X5 = X5^2;
    Z5 = X3 * Z5;
    X5 = Z3 * X5;
    return X5,Z5;

# Point doubling
def double_point_Montgomery_plus(X2, Z2, A0):
  if Z2 == 0 or X2^3+A0*X2^2+X2 == 0:
    return 0, 0;
  else:
    return (X2^2-Z2^2)^2, 4*X2*Z2*(X2^2+A0*X2*Z2+Z2^2);

def recover_y3(X0, Y0, X1, Z1, X2, Z2, A):
	x = X0;
	y = Y0;
	t1 = x * Z1;
	t2 = X1 + t1;
	t3 = X1 - t1;
	t3 = t3^2;
	t3 = t3 * X2;
	t1 = 2 * Z1;
	t1 = t1 * A;
	t2 = t1 + t2;
	t4 = x * X1;
	t4 = t4 + Z1;
	t2 = t2 * t4;
	t1 = t1 * Z1;
	t2 = t2 - t1;
	t2 = t2 * Z2;
	Y = t2 - t3;
	t1 = 2 * y;
	t1 = t1 * Z1;
	t1 = t1 * Z2;
	X = X1 * t1;
	Z = Z1 * t1;
	if X == 0 and Y ==0 and Z == 0:
		Y = G(1);
	return X, Y, Z;

def step_zero_Montgomery_plus(X1, Z1, X2, Z2, X3, Z3, A0):
  return (X2^2-Z2^2)^2, 4*X2*Z2*(X2^2+A0*X2*Z2+Z2^2), 4*(X2*X3-Z2*Z3)^2*Z1, 4*(X2*Z3-Z2*X3)^2*X1;
  
def step_one_Montgomery_plus(X1, Z1, X3, Z3, X2, Z2, A0):
  return 4*(X2*X3-Z2*Z3)^2*Z1, 4*(X2*Z3-Z2*X3)^2*X1, (X2^2-Z2^2)^2, 4*X2*Z2*(X2^2+A0*X2*Z2+Z2^2);

# Scalar multiplication
def scalar_multiplication_Montgomery_plus(n, X1, Z1, A0):
  X2 = 1; Z2 = 0; X3 = X1; Z3 = Z1;
  nbits = [];
  while(n >= 1):
    nbits.append(n % 2);
    n = n // 2;
  nbits.reverse();
  if Z1 == 0:  
    print("Error");
  else:
    for i in range(len(nbits)):
      if nbits[i] == 0: 
        X2, Z2, X3, Z3 = step_zero_Montgomery_plus(X1, Z1, X2, Z2, X3, Z3, A0);
      else:
        X2, Z2, X3, Z3 = step_one_Montgomery_plus(X1, Z1, X2, Z2, X3, Z3, A0);
  return X2, Z2;
    
def F0(X1,X2,X3):
    return (X3*X1-X2)^2

def F1(X1,X2,X3,A0):
    return -2*((X1*X2+X3)*(X1*X3+X2)+2*A0*X1*X2*X3)

def F2(X1,X2,X3):
    return (X1*X2-X3)^2

# Compute I, J, K
def IJK(XP, ZP, l, A0):
  S = set(range(1,l-1,2));
  b = floor(sqrt(l - 1)/2);
  if b == 0:
    b2 = 0;
  else:
    b2 = floor((l - 1)/(4*b));
  I = set(2*b*(2*i + 1) for i in range(b2));
  J = set(2*j+1 for j in range(b));
  K = set(range(4*b*b2+1,l-1,2));
  xS = {s:scalar_multiplication_Montgomery_plus(s, XP, ZP, A0) for s in K.union(I).union(J)}
  return [xS, I, J, K];
  
 
# Compute hI(x) = \prod_{i \in I} (x - x_i)
def h_I(x1, I):
  hI = GX(prod(x1[i][1]*X-x1[i][0] for i in I));
  return hI;
 
# Compute hS(x)
def hS_for_iso(x1, alpha, A0, J, K, hI):
  EJ = GX(prod(F0(X,x1[j][0],x1[j][1])*alpha^2+F1(X,x1[j][0],x1[j][1],A0)*alpha+F2(X,x1[j][0],x1[j][1]) for j in J));
  R = hI.resultant(EJ);
  hK = prod(alpha*x1[s][1]-x1[s][0] for s in K);
  return hK*R;
  

# Large prime degree isogeny
def x_val_big(x1, l, X1, Z1, A0, J, K, hI):
  E_0J = GX(prod(F0(X,x1[j][0],x1[j][1])*Z1^2+F1(X,x1[j][0],x1[j][1],A0)*X1*Z1+F2(X,x1[j][0],x1[j][1])*X1^2 for j in J));
  E_1J = GX(prod(F0(X,x1[j][0],x1[j][1])*X1^2+F1(X,x1[j][0],x1[j][1],A0)*X1*Z1+F2(X,x1[j][0],x1[j][1])*Z1^2 for j in J));
  R0 = hI.resultant(E_0J);
  R1 = hI.resultant(E_1J);
  hK0 = prod(Z1*x1[s][1]- X1*x1[s][0] for s in K);
  hK1 = prod(X1*x1[s][1]- Z1*x1[s][0] for s in K);
  newX1 = X1 * (hK0 * R0)^2;
  newZ1 = Z1 * (hK1 * R1)^2;
  return newX1, newZ1;
  
def x_iso_big(x1, l, A0, J, K, hI):
  newA0 = 2*((A0 + 2)^l*hS_for_iso(x1, G(-1), A0, J, K, hI)^8 + (A0 - 2)^l*hS_for_iso(x1, G(1), A0, J, K, hI)^8)/((A0 + 2)^l*hS_for_iso(x1, G(-1), A0, J, K, hI)^8 - (A0 - 2)^l*hS_for_iso(x1, G(1), A0, J, K, hI)^8);
  return newA0;
 
# Small prime degree isogeny  
def x_val_small(XP, ZP, l, X1, Z1, A0):
  XQ = XP; ZQ = ZP;
  f1 = (X1*XQ - Z1*ZQ); f2 = (X1*ZQ - Z1*XQ);
  if l == 3:
    return X1 * f1^2, Z1 * f2^2;
  else:
    [XDBL, ZDBL] = double_point_Montgomery_plus(XQ, ZQ, A0);
    [XQ, ZQ] = differential_addition_Montgomery_plus(XDBL, ZDBL, XQ, ZQ, XQ, ZQ, A0);
    f1 *= (XQ*X1 - ZQ * Z1); f2 *= (ZQ*X1 - XQ * Z1);
    XPrev = XP; ZPrev = ZP;
    for i in range (3, (l - 1)//2 + 1):
        XTemp = XQ;
        ZTemp = ZQ;
        [XQ, ZQ] = differential_addition_Montgomery_plus(XQ, ZQ, XDBL, ZDBL, XPrev, ZPrev, A0);
        f1 *= (XQ*X1 - ZQ * Z1); f2 *= (ZQ*X1 - XQ*Z1);
        XPrev = XTemp; ZPrev = ZTemp;
  return X1 * f1^2, Z1 * f2^2;


def x_iso_small(XP, ZP, l, A0):
  XQ = XP; ZQ = ZP;
  pi = XQ/ZQ; sigma = (XQ^2 - ZQ^2)/(XQ*ZQ);
  if l == 3:
    return pi^2 * (A0 - 6*sigma);
  else:
    [XQ, ZQ] = double_point_Montgomery_plus(XQ, ZQ, A0);
    xQ = XQ/ZQ;
    pi *= xQ; sigma += xQ - 1/xQ;
    XPrev = XP; ZPrev = ZP;
    for i in range (3, (l - 1)//2 + 1):
        XTemp = XQ;
        ZTemp = ZQ;
        [XQ, ZQ] = differential_addition_Montgomery_plus(XQ, ZQ, XP, ZP, XPrev, ZPrev, A0);
        xQ = XQ/ZQ;
        pi *= xQ; sigma += xQ - 1/xQ;
        XPrev = XTemp; ZPrev = ZTemp;
  return pi^2 * (A0 - 6*sigma);

 
# Input: E0, P_B, Q_B, R_B, Q_A
# Output: \phi_A(Q_A), EA
def msidh_action_Alice(A0, XPush, private_key, degree_bound, X1, X2, Y1, Y2):
  S = []; 
  Ker = PA + private_key * QA;
  S.append([286, [Ker[0], 1]]);
  i = 0;
  Aimage = A0;
  #APre.append(Aimage);
  while S != []:
    [h, [XP, ZP]] = S[0];
    S.pop(0);
    if h == 1 and S != []:
      ATemp = Aimage;
      if prime_A[len(prime_A) - i] >= degree_bound:
        [x1, I, J, K] = IJK(XP, ZP, prime_A[len(prime_A) - i], ATemp);
        hI = h_I(x1, I);
        Aimage = x_iso_big(x1, prime_A[len(prime_A) - i], ATemp, J, K, hI);
        S1 = [];
        while S != []:
          [h, [xTemp1, zTemp1]] = S[len(S)-1];
          [xTemp2, zTemp2] = [XP, ZP];
          S.pop();
          [XP, ZP] = x_val_big(x1,  prime_A[len(prime_A) - i], xTemp1 , zTemp1,  ATemp, J, K, hI);
          S1.insert(0, [h - 1, [XP,ZP]]);
        S = S1;
        for j in range(3):    
            [XPush[j][0], XPush[j][1]] = x_val_big(x1, prime_A[len(prime_A) - i], XPush[j][0], XPush[j][1] , ATemp, J, K, hI);  
      else:
        Aimage = x_iso_small(XP, ZP, prime_A[len(prime_A) - i], ATemp);
        S1 = [];
        while S != []:
          [h, [xTemp1, zTemp1]] = S[len(S)-1];
          [xTemp2, zTemp2] = [XP, ZP];
          S.pop();
          [XP, ZP] = x_val_small(XP, ZP, prime_A[len(prime_A) - i], xTemp1 , zTemp1, ATemp);
          S1.insert(0, [h - 1, [XP, ZP]]);
        S = S1;
        for j in range(3):
            [XPush[j][0], XPush[j][1]] = x_val_small(xTemp2, zTemp2, prime_A[len(prime_A) - i], XPush[j][0], XPush[j][1] , ATemp);
    elif h == 1 and S == []: 
      ATemp = Aimage;
      i = i + 1;
      if prime_A[len(prime_A) - i] >= degree_bound:
        [x1, I, J, K] = IJK(XP, ZP, prime_A[len(prime_A) - i], ATemp);
        hI = h_I(x1, I);
        Aimage = x_iso_big(x1, prime_A[len(prime_A) - i], ATemp, J, K, hI);
        for j in range(3):
            [XPush[j][0], XPush[j][1]] = x_val_big(x1, prime_A[len(prime_A) - i], XPush[j][0], XPush[j][1] , ATemp,  J, K, hI);
      else:
        Aimage = x_iso_small(XP, ZP, prime_A[len(prime_A) - i], ATemp);
        for j in range(3):
            [XPush[j][0], XPush[j][1]] = x_val_small(XP, ZP, prime_A[len(prime_A) - i], XPush[j][0], XPush[j][1] , ATemp); 
    elif s[i] > 0 and s[i] < h:
      S.insert(0, [h, [XP, ZP]]);
      for j in range(s[i]):
          [XP, ZP] = scalar_multiplication_Montgomery_plus(prime_A[j], XP, ZP, Aimage);
      S.insert(0, [h - s[i], [XP, ZP]]);
      i = i + 1;
  for i in range(3):
      XPush[i] = XPush[i][0]/XPush[i][1];
  return Aimage, XPush;
 
# Input: EB, U, V, SA(the result of the discrete logarithm computation)
# Output: EBA
def msidh_action_Alice_last(A0, private_key, degree_bound, U, V, C1, C2, C3, C4):
  S = [];
  P = (C1 + C2 * private_key)*U + (C3 + C4 * private_key)*V;
  S.append([286, [P[0], 1]]);
  i = 0;
  Aimage = A0;
  while S != []:
    [h, [XP,ZP]] = S[0];
    S.pop(0);
    if h == 1 and S != []:
      ATemp = Aimage;
      if prime_A[len(prime_A) - i] >= degree_bound:
        [x1, I, J, K] = IJK(XP, ZP, prime_A[len(prime_A) - i], ATemp);
        hI = h_I(x1, I);
        Aimage = x_iso_big(x1, prime_A[len(prime_A) - i], ATemp, J, K, hI);
        S1 = [];
        while S != []:
          [h, [xTemp1, zTemp1]] = S[len(S)-1];
          [xTemp2, zTemp2] = [XP, ZP];
          S.pop();
          [XP, ZP] = x_val_big(x1,  prime_A[len(prime_A) - i], xTemp1 , zTemp1,  ATemp,J, K, hI);
          S1.insert(0, [h - 1, [XP,ZP]]);
        S = S1;
      else:
        Aimage = x_iso_small(XP, ZP, prime_A[len(prime_A) - i], ATemp);
        S1 = [];
        while S != []:
          [h, [xTemp1, zTemp1]] = S[len(S)-1];
          [xTemp2, zTemp2] = [XP, ZP];
          S.pop();
          [XP, ZP] = x_val_small(XP, ZP, prime_A[len(prime_A) - i], xTemp1 , zTemp1, ATemp);
          S1.insert(0, [h - 1, [XP, ZP]]);
        S = S1;
    elif h == 1 and S == []: 
      ATemp = Aimage;
      i = i + 1;
      if prime_A[len(prime_A) - i] >= degree_bound:
        [x1, I, J, K] = IJK(XP, ZP, prime_A[len(prime_A) - i], ATemp);
        hI = h_I(x1, I);
        Aimage = x_iso_big(x1, prime_A[len(prime_A) - i], ATemp,J, K, hI);
      else:
        Aimage = x_iso_small(XP, ZP, prime_A[len(prime_A) - i], ATemp);
    elif s[i] > 0 and s[i] < h:
      S.insert(0, [h, [XP, ZP]]);
      for j in range(s[i]):
          [XP, ZP] = scalar_multiplication_Montgomery_plus(prime_A[j], XP, ZP, Aimage);
      S.insert(0, [h - s[i], [XP, ZP]]);
      i = i + 1;
  return Aimage;

# Input: E0, P_A, Q_A, R_A, Q_B
# Output: \phi_B(Q_B), EB
def msidh_action_Bob(A0, XPush, private_key, degree_bound, X1, X2, Y1, Y2):
  S = [];
  Ker = PB + private_key * QB;
  S.append([286, [Ker[0], 1]]);
  i = 0;
  Bimage = A0;
  #BPre.append(Bimage);
  while S != []:
    [h, [XP, ZP]] = S[0];
    S.pop(0);
    if h == 1 and S != []:
      BTemp = Bimage;
      if prime_B[len(prime_B) - i] >= degree_bound:
        [x1, I, J, K] = IJK(XP, ZP, prime_B[len(prime_B) - i], BTemp);
        hI = h_I(x1, I);
        Bimage = x_iso_big(x1, prime_B[len(prime_B) - i], BTemp, J, K, hI);
        S1 = [];
        while S != []:
          [h, [xTemp1, zTemp1]] = S[len(S)-1];
          [xTemp2, zTemp2] = [XP, ZP];
          S.pop();
          [XP, ZP] = x_val_big(x1,  prime_B[len(prime_B) - i], xTemp1 , zTemp1,  BTemp, J, K, hI);
          S1.insert(0, [h - 1, [XP,ZP]]);
        S = S1;
        for j in range(3):
            [XPush[j][0], XPush[j][1]] = x_val_big(x1, prime_B[len(prime_B) - i], XPush[j][0], XPush[j][1] , BTemp, J, K, hI);
      else:
        Bimage = x_iso_small(XP, ZP, prime_B[len(prime_B) - i], BTemp);
        S1 = [];
        while S != []:
          [h, [xTemp1, zTemp1]] = S[len(S)-1];
          [xTemp2, zTemp2] = [XP, ZP];
          S.pop();
          [XP, ZP] = x_val_small(XP, ZP, prime_B[len(prime_B) - i], xTemp1 , zTemp1, BTemp);
          S1.insert(0, [h - 1, [XP, ZP]]);
        S = S1;
        for j in range(3):
            [XPush[j][0], XPush[j][1]] = x_val_small(xTemp2, zTemp2, prime_B[len(prime_B) - i], XPush[j][0], XPush[j][1] , BTemp);
    elif h == 1 and S == []: 
      BTemp = Bimage;
      i = i + 1;
      if prime_B[len(prime_B) - i] >= degree_bound:
        [x1, I, J, K] = IJK(XP, ZP, prime_B[len(prime_B) - i], BTemp);
        hI = h_I(x1, I);
        Bimage = x_iso_big(x1, prime_B[len(prime_B) - i], BTemp, J, K, hI);
        for j in range(3):
            [XPush[j][0], XPush[j][1]] = x_val_big(x1, prime_B[len(prime_B) - i], XPush[j][0], XPush[j][1] , BTemp,  J, K, hI); 
      else:
        Bimage = x_iso_small(XP, ZP, prime_B[len(prime_B) - i], BTemp);
        for j in range(3):
            [XPush[j][0], XPush[j][1]] = x_val_small(XP, ZP, prime_B[len(prime_B) - i], XPush[j][0], XPush[j][1] , BTemp); 
    elif s[i] > 0 and s[i] < h:
      S.insert(0, [h, [XP, ZP]]);
      for j in range(s[i]):
          [XP, ZP] = scalar_multiplication_Montgomery_plus(prime_B[j], XP, ZP, Bimage);
      S.insert(0, [h - s[i], [XP, ZP]]);
      i = i + 1;
  for i in range(3):
      XPush[i] = XPush[i][0]/XPush[i][1];
  return Bimage, XPush;

# Input: EA, U, V, SB(the result of the discrete logarithm computation)
# Output: EAB 
def msidh_action_Bob_last(A0, private_key, degree_bound, U, V, C1, C2, C3, C4):
  S = [];
  P = (C1 + C2 * private_key)*U + (C3 + C4 * private_key)*V;
  S.append([286, [P[0], 1]]);
  i = 0;
  Bimage = A0;
  while S != []:
    [h, [XP,ZP]] = S[0];
    S.pop(0);
    if h == 1 and S != []:
      BTemp = Bimage;
      if prime_B[len(prime_B) - i] >= degree_bound:
        [x1, I, J, K] = IJK(XP, ZP, prime_B[len(prime_B) - i], BTemp);
        hI = h_I(x1, I);
        Bimage = x_iso_big(x1, prime_B[len(prime_B) - i], BTemp, J, K, hI);
        S1 = [];
        while S != []:
          [h, [xTemp1, zTemp1]] = S[len(S)-1];
          [xTemp2, zTemp2] = [XP, ZP];
          S.pop();
          [XP, ZP] = x_val_big(x1,  prime_B[len(prime_B) - i], xTemp1 , zTemp1,  BTemp,J, K, hI);
          S1.insert(0, [h - 1, [XP,ZP]]);
        S = S1;
      else:
        Bimage = x_iso_small(XP, ZP, prime_B[len(prime_B) - i], BTemp);
        S1 = [];
        while S != []:
          [h, [xTemp1, zTemp1]] = S[len(S)-1];
          [xTemp2, zTemp2] = [XP, ZP];
          S.pop();
          [XP, ZP] = x_val_small(XP, ZP, prime_B[len(prime_B) - i], xTemp1 , zTemp1, BTemp);
          S1.insert(0, [h - 1, [XP, ZP]]);
        S = S1;
    elif h == 1 and S == []: 
      BTemp = Bimage;
      i = i + 1;
      if prime_B[len(prime_B) - i] >= degree_bound:
        [x1, I, J, K] = IJK(XP, ZP, prime_B[len(prime_B) - i], BTemp);
        hI = h_I(x1, I);
        Bimage = x_iso_big(x1, prime_B[len(prime_B) - i], BTemp,J, K, hI);
      else:
        Bimage = x_iso_small(XP, ZP, prime_B[len(prime_B) - i], BTemp);
    elif s[i] > 0 and s[i] < h:
      S.insert(0, [h, [XP, ZP]]);
      for j in range(s[i]):
          [XP, ZP] = scalar_multiplication_Montgomery_plus(prime_B[j], XP, ZP, Bimage);
      S.insert(0, [h - s[i], [XP, ZP]]);
      i = i + 1;
  return Bimage;
  

# Compute the j-invariant
def J(MA):
  return 256*(MA^2 - 3)^3 / (MA^2 - 4);

# Lucas sequences (Algorithm 1)
def Lucassequences(f,ell):
	v0 = G(2);
	tmp1 = f;
	v1 = tmp1;
	tmp2 = G(2);
	string = ell.str(base=2);
	Len = len(string);
	for j in range(Len):
		if string[j] == '1':
			v0 = v0 * v1 - tmp1;
			v1 = v1 * v1 - tmp2;
		else:
			v1 = v0 * v1 - tmp1;
			v0 = v0 * v0 - tmp2;
	return v0;

# Lucas sequences (Algorithm 1), but return v1 as well	
def Lucassequences2(f,ell):
	v0 = 2;
	tmp1 = f + f^-1;
	v1 = tmp1;
	tmp2 = G(2);
	string = ell.str(base=2);
	Len = len(string);
	for j in range(Len):
		if string[j] == '1':
			v0 = v0 * v1 - tmp1;
			v1 = v1 * v1 - tmp2;
		else:
			v1 = v0 * v1 - tmp1;
			v0 = v0 * v0 - tmp2;
	return v0, v1;
	
# Exponentiation using Lucas sequences (Algorithm 2)
def ELS(f,ell):
	if ell < 100000000000000000000000000:
		return f^ell;
	else:
		[tmp1,tmp2] = Lucassequences2(f,ell-1);
		tmp1 = tmp1/G(2); 
		tmp2 = tmp2/G(2);
		re = tmp2;
		f0 = (f.polynomial().list())[0];
		f1 = f - f0;		
		tmp2 = tmp2 * f0 - tmp1;
		tmp2 = tmp2* (f0^2-1)^(-1);
		im = tmp2 * f1;
		return re + im;

# elligator: randomly generate a point
def elligator(A, E):
  flag_2 = 0;
  u = 1 + a;
  while flag_2 == 0:
    r0 = random.randint(0, p);
    r1 = random.randint(0, p);
    r = r0 + r1 * a;
    tmp = u * r^2;
    cond1 = 1 + tmp;
    cond2l = A^2 * tmp;
    cond2r = cond1^2;
    if cond1 != 0 and cond2l != cond2r:
      v = -A/cond1;
      e = is_square(v * (v^2 + A*v + G(1)));
    if e == False:
       e = -1;
    else:
      e = 1;
    x = e * v - (1 - e)*(A/G(2));
    y = - e * sqrFp2(x * (x^2 + A * x + 1));
    flag_2 = 1;
  return E([x,y]);

# Batch cofactor exponentiation using trace (Algorithm 5)
def batch_cof_trace(fi,f,ind,n, L):
	if n == 1:
		fi.append(f);
		return 1;
	m=floor(n/2);
	u=1;
	v=1;
	for i in range(m):
		u=L[ind[i]]*u;
	for j in range(m,n):
		v=L[ind[j]]*v;
	left=Lucassequences(f,u);
	right=Lucassequences(f,v);
	batch_cof_trace(fi,left,[ind[i] for i in range(m,n)],n-m, L);
	batch_cof_trace(fi,right,[ind[i] for i in range(m)],m, L);

# Batch cofactor exponentiation in the cyclic group (Algorithm 7)
def batch_cof(fi,f,ind,n, L):
	if n == 1:
		fi.append(f);
		return 1;
	m=floor(n/2);
	u=1;
	v=1;
	for i in range(m):
		u=L[ind[i]]*u;
	for j in range(m,n):
		v=L[ind[j]]*v;
	left=ELS(f,u);
	right=ELS(f,v);
	batch_cof(fi,left,[ind[i] for i in range(m,n)],n-m, L);
	batch_cof(fi,right,[ind[i] for i in range(m)],m, L);

# Batch cofactor multiplication (Algorithm 4)
# Output:{Ui},the order of each point is ln,ln-1,...,l1.
def batch_cof_mul(Ui,U,ind,n,A, E, L):
    if n == 1:
        Ui.append(U);
        return 1;
    m=floor(n/2);
    u=1;
    v=1;
    for i in range(m):
        u=L[ind[i]]*u;
    for j in range(m,n):
        v=L[ind[j]]*v;
    R0X, R0Z, R1X, R1Z = Montgomery_ladder(u, A, U[0], U[2]);
    UX, UY, UZ = recover_y3(U[0], U[1], R0X, R0Z, R1X, R1Z, A);
    left = E([UX, UY, UZ]);
    R0X, R0Z, R1X, R1Z = Montgomery_ladder(v, A, U[0], U[2]);
    UX, UY, UZ = recover_y3(U[0], U[1], R0X, R0Z, R1X, R1Z, A);
    right = E([UX, UY, UZ]);
    batch_cof_mul(Ui,left,[ind[i] for i in range(m,n)],n-m, A, E, L);
    batch_cof_mul(Ui,right,[ind[i] for i in range(m)],m, A, E, L);

# Generate U 
def generate_U(Uj,A, ind, E, L, N):
	R=elligator(A, E); 
	R0X, R0Z, R1X, R1Z = Montgomery_ladder(4*N,A,R[0],R[2]);
	UX, UY, UZ = recover_y3(R[0], R[1], R0X, R0Z, R1X, R1Z, A);
	U = E([UX,UY,UZ]);
	n=len(ind);
	batch_cof_mul(Uj,U,ind,n,A, E, L);
	Iu=[];
	for i in range(n):
		if Uj[i] == E([0,1,0]):
			Iu.append(285-i);
	Seed = 1;
	while len(Iu) !=0:
		random.seed(int(Seed));
		R = elligator(A, E);
		R0X, R0Z, R1X, R1Z = Montgomery_ladder(4*N,A,R[0],R[2]);
		UX, UY, UZ = recover_y3(R[0], R[1], R0X, R0Z, R1X, R1Z, A);
		U1 = E([UX,UY,UZ]);
		Uj1=[];
		n=len(Iu);
		prime_prod = 1;
		for i in list(set(ind)-set(Iu)):
			prime_prod = prime_prod * L[i];
		R0X, R0Z, R1X, R1Z = Montgomery_ladder(prime_prod,A,U1[0],U1[2]);
		UX, UY, UZ = recover_y3(U1[0], U1[1], R0X, R0Z, R1X, R1Z, A);
		U1 = E([UX,UY,UZ]);
		batch_cof_mul(Uj1,U1,Iu,n,A, E, L);
		tmp=Iu;
		Iu=[];
		for i in range(n):
			if Uj1[i] != E([0,1,0]):
				U = U+Uj1[i];
				Uj[285-tmp[i]]=Uj1[i];
			else:
				Iu.append(tmp[i]);
		Seed += 1;
	return U;
       
# Generate V 
def generate_V(A,ind,U,Uj, E, primelist, N):
    V = elligator(A, E); 
    if N == NA:
      string_N = string_A;
    else:
      string_N = string_B;
    f = compressed_pairing(U,V,string_N,N, A);
    fj = [];
    n = len(ind);
    batch_cof_trace(fj,f,ind,n, primelist);
    Iv = [];
    for i in range(n):
        if fj[i] == 2:
            Iv.append(285-i);
    Seed = 1;
    while len(Iv) != 0:
        random.seed(int(Seed));
        V1 = elligator(A, E); 
        U1 = E([0,1,0]);
        L = 1;
        for i in Iv:
            U1 = U1 + Uj[285-i];
            L = L * primelist[i];
        n = len(Iv);
        string_L = (L).str(base=2);
        f1 = compressed_pairing(U1,V1,string_L,L, A);
        fj1 = [];
        batch_cof_trace(fj1,f1,Iv,n, primelist);
        flag = 0;
        for i in range(n):
          if fj[i] != 2:
            flag = 1;
        if flag == 1:
          prime_prod = 1;
          for k in list(set(ind)-set(Iv)):
            prime_prod = prime_prod * primelist[k];
          R0X, R0Z, R1X, R1Z = Montgomery_ladder(prime_prod,A,V1[0],V1[2]);
          VX, VY, VZ = recover_y3(V1[0], V1[1], R0X, R0Z, R1X, R1Z, A);
          V1 = E([VX,VY,VZ]);
          tmp = Iv;
          Iv = [];
          Vj1 = [];
          batch_cof_mul(Vj1,V1,tmp,n,A, E, primelist);
          for j in range(n):
              if fj1[j] == 2:
                  Iv.append(tmp[n-1-j]);
              else:
                  V = V+Vj1[j];
          Seed += 1;
    return V;

# Pairing
def miller_affine(P,Q,string,r, A):
    (Px,Py,Pz)=P;
    (Qx,Qy,Qz)=Q;
    f1=G(1);
    Rx=Px;
    Ry=Py;

    l=len(string);
    flag=0;
    for i in range(1,l):
        lamb=(3*Rx^2+2*A*Rx+1)/(2*Ry);

        f1 = f1^2*(Qy-Ry-lamb*(Qx-Rx));

        Nx = lamb^2-2*Rx-A;
        Ny = lamb*(Rx-Nx)-Ry;

        Rx = Nx;
        Ry = Ny;
        if Qx != Rx:
            f1 = f1/(Qx-Rx);
        else:
            flag=1;
        if string[i] == '1' and i != l-1:
            if Rx != Px:
                lamb_1 =(Ry-Py)/(Rx-Px);
            else:
                lamb_1 = 1;
                flag = 1;
            f1 = f1*(Qy-Py-lamb_1*(Qx-Px));
            Nx = lamb_1^2-(Rx+Px)-A;
            Ny = lamb_1*(Px-Nx)-Py;
            Rx = Nx;
            Ry = Ny;
            if Qx != Rx:
                f1 = f1/(Qx-Rx);
            else:
                flag=1;
    f1 = f1*(Qx-Rx);
    [f11,f12] = f1.polynomial().list();
    f1 = (f11 - f12 *a)/f1;
    f1 = ELS(f1,ceil((p+1)/r));
    if flag == 1:
        f1 = 1;
    return (f1);
    

# Compressed_pairing
def compressed_pairing(P,Q,string,r, A):
    (Px,Py,Pz)=P;
    (Qx,Qy,Qz)=Q;
    f1=G(1);
    Rx=Px;
    Ry=Py;

    l=len(string);
    flag=0;
    for i in range(1,l):
        lamb=(3*Rx^2+2*A*Rx+1)/(2*Ry);

        f1 = f1^2*(Qy-Ry-lamb*(Qx-Rx));

        Nx = lamb^2-2*Rx-A;
        Ny = lamb*(Rx-Nx)-Ry;

        Rx = Nx;
        Ry = Ny;
        if Qx != Rx:
            f1 = f1/(Qx-Rx);
        else:
            flag=1;
        if string[i] == '1' and i != l-1:
            if Rx != Px:
                lamb_1 =(Ry-Py)/(Rx-Px);
            else:
                lamb_1 = 1;
                flag = 1;
            f1 = f1*(Qy-Py-lamb_1*(Qx-Px));
            Nx = lamb_1^2-(Rx+Px)-A;
            Ny = lamb_1*(Px-Nx)-Py;
            Rx = Nx;
            Ry = Ny;
            if Qx != Rx:
                f1 = f1/(Qx-Rx);
            else:
                flag=1;
    f1 = f1*(Qx-Rx);
    [f11, f12] = f1.polynomial().list();
    f1 = (f11 - f12 * a)/f1;
    [f11, f12] = f1.polynomial().list();
    f1 = 2 * f11;
    f1 = Lucassequences(f1, ceil((p+1)/r));
    if flag == 1:
        f1 = 2;
    return (f1);

# Chinese Remainder Theorem
def chinese_remainder(s, L):
	if len(s) == 0:
		return 1;
	while len(s) > 1:
		label = 0;
		if mod(len(s),2) == 1:
			tmps = s[len(s)-1];
			tmpL = L[len(s)-1];
			label = 1;
		s = [crt(s[i*2], s[i*2 + 1], L[i*2], L[i*2 + 1]) for i in range(floor(len(s)/2))]; 
		L = [prod(L[i*2 : (i + 1)*2])  for i in range(floor(len(L)/2))];
		if label == 1:
			s.append(tmps);
			L.append(tmpL);
	return s[0];
  
# Discrete logarithm computation (Algorithm 8)
def DLC(ind, hh1, hh2, hh3, hh4, label, Primes):
  H_base = []; H1 = []; H2 = []; H3 = [];
  n = len(Primes);
  if label == 0:
    H_base = hh1; H1 = hh2; H2 = hh3; H3 = hh4;
  if label == 1:
    H_base = hh2; H1 = hh1; H2 = hh3; H3 = hh4;
  if label == 2:
    H_base = hh3; H1 = hh1; H2 = hh2; H3 = hh4;
  if label == 3:
    H_base = hh4; H1 = hh1; H2 = hh2; H3 = hh3;
  ans = zero_vector(3*n);
  hh = [];
  for i in range(3*n):
    hh.append(G(0));
  for i in range(n):
    hh[i] = H1[n-1-i]; 
    hh[n+i] = H2[n-1-i];
    hh[2*n+i] = H3[n-1-i];
  for i in range(n):
    tmp = H_base[n-1-i];
    hhtmp = zero_vector(6);
    label3 = [0,0,0];
    for j in range(3):
      if hh[i+j*n] == 1:
        label3[j] = 1;
      else:
        [hhtmp[2*j], hhtmp[2*j+1]] = hh[i+j*n].polynomial().list();
        hhtmp[2*j] = 2 * hhtmp[2*j];
    [tmp1,tmp2] = H_base[n-1-i].polynomial().list();
    tmp0 = 2 * tmp1; v0 = 2; v1 = tmp0; tmp3 = tmp0^2 - G(4);
    j = 0; v2 = v1^2 - 2;
    while label3 != [1,1,1]:
      for k in range(3):
        if hhtmp[2*k] == v1:
          label3[k] = 1;
          if j != 0:	
            if hhtmp[2*k+1] * tmp3 == tmp2 * (v2 - v0):
              ans[k*n+i] = j+1; label3[k] = 1;
            else:
              ans[k*n+i] = -j-1; label3[k] = 1; 
          else:
            if hhtmp[2*k+1] == tmp2:
              ans[k*n+i] = 1; label3[k] = 1;
            else:
              ans[k*n+i] = -1; label3[k] = 1;
      j = j + 1; 
      tmp = v2;
      v2 = tmp * tmp0 - v1;
      v0 = v1;
      v1 = tmp;
  S = zero_vector(3);
  S[0] = chinese_remainder(ans[0:n], Primes);
  S[1] = chinese_remainder(ans[n:2*n], Primes);
  S[2] = chinese_remainder(ans[2*n:3*n], Primes);
  return S;

s = []

for i in range(1,len(prime_A)):
    s.append(i);

ind = [];

for i in range(len(prime_A)):
    ind.append(i);
   
s.reverse();

Apush = G(757098303104940108285058773034422199096127934252739167545886032444609660274663596294987591904643360546109608756345310013310208059320172658107614517789783093689924898179431083692418013767465649012136349558955545416531908397020039325270135100547052817419456794700625313017177240282227377130742433332104228025482374349345406325750569316002448573978664252690227614696111012065047740617045249248767715362057127026129428375390123019572283505392834149280722772234886558094558191255828392047390876592175428787351743026779666031830035917163833376564373010126803976251450706042057998510453963685021946223308565118199303808606430061622074077719528331371171895913130310749070646047443372785327539904605124503271837307498851247893565512981341580236653169009866282367331200495058650444174535147724999832919679400106804791555385184524560416024066964619389372751010844647304244973383891814358540685994179133358761815954886061653912202059948841158589919684134954123329947154866350898840803223203638104097501194040841680607725339710975009602499030931837660602183280150823768604895753921081255924720547846153967006806770710199105078722950328640004644997728240428201324966819449564595573243245193743826051207118244578169570042395443787286034854582691486556647808590395688380033646610610877929010899648323065576815605139702130835585789544750558865180750187280403118407362050099916502128746114156253448915958398090487493876922169575553367031973733219822803157787110905039969049808733787791247089357700680961509955447986201899380603640045940837837604139368044230873582947320576907592479709764723991005500347026544425287783413514401685468535267987454091674512704220967207217714119034484251409657429732116798440204621473231573939178490199947618597845350547051809349004793676960506449949268043849923249152042*a + 698477134606605706113554991682090880375047196864932014208366634132536409474145713706771413842455985474384352867097354308251753962252085555296827595216771428985802619921179979479521584498705698155125120003658159017434917937641220395821848532896102078492304226874617014090098952229744438700137963872871126268475557086744023057335069996922071201125756121584518653462135536188164754969046895149955762388648847028494187766986622943987050193196953285005533661272679954864662318017421902675728492542546708917594501926451561621433649008487175633417117938847171792474672397777154937255599981483335706464322918892206119735756398490367724458556598853679979935659426046714958277910431872933468961628676154956019348887972765402646418088551370965492154102953411663072294698248084419044890575108796304402711611577793867315204808882514992838098711551683644605793140570338092315284794911642820067863760638381395809379753828974255241970003890191993563276158223537004013827203685878175467057448108191089143231207725558626510528524140127797216684018781726829922557217960216959140398048434265452348146551487597124020141107890487897384384673097856853826307584097559685170066740476070684720288369821866059506365269947201812370855773501637602268665757297305301019026586931045777044696675225658352836079733181555520397820905550746710435985502084361089739211972194684334402674984847972978699394097154570979137919277826008458014022796032451239688853528411775241114500009119335409217241153952320381958495382950761253898772756905460396877569212677792189272317162041648166802283507486095430794654229354738567370675942750344681792224882209810814838938810519633888561831560374197900020638039867024343240410562617550915234156993724375935952303367878318004736336764049376636496384661409327915537785219705166705578476
);

random.seed(int(0));
skA = random.randint(1, NA - 1);
random.seed(int(0));
skB = random.randint(1, NB - 1);

T2 = time.time();

XPushA = [[PB[0], G(1)], [QB[0], G(1)], [RB[0], G(1)]];

[A1, XPushA] = msidh_action_Alice(Apush, XPushA, skA, degree_bound, QA[0], PA[0], QA[1], PA[1]);

xphi_APB =  XPushA[0];

xphi_AQB = XPushA[1];

xphi_ARB = XPushA[2];

EA = EllipticCurve(G,[0,A1,0,1,0]);
phi_APB = EA([xphi_APB, sqrFp2(xphi_APB^3+A1*xphi_APB^2+xphi_APB)]);
phi_AQB = EA([xphi_AQB, sqrFp2(xphi_AQB^3+A1*xphi_AQB^2+xphi_AQB)]);
if (phi_APB[0] + phi_AQB[0] + xphi_ARB + A1) * (phi_APB[0] - phi_AQB[0])^2 == (phi_APB[1] - phi_AQB[1])^2:
  phi_AQB = - phi_AQB; 

T3 = time.time();

print("Alice's isogeny computation:", T3-T2);

XPushB = [[PA[0], G(1)], [QA[0], G(1)], [RA[0], G(1)]];

[B1, XPushB] = msidh_action_Bob(Apush, XPushB, skB, degree_bound, QB[0], PB[0], QB[1], PB[1]);

xphi_BPA = XPushB[0]; 

xphi_BQA = XPushB[1]; 

xphi_BRA = XPushB[2]; 

EB = EllipticCurve(G,[0,B1,0,1,0]);
phi_BPA = EB([xphi_BPA, sqrFp2(xphi_BPA^3+B1*xphi_BPA^2+xphi_BPA)]);
phi_BQA = EB([xphi_BQA, sqrFp2(xphi_BQA^3+B1*xphi_BQA^2+xphi_BQA)]);
if (phi_BPA[0] + phi_BQA[0] + xphi_BRA + B1) * (phi_BPA[0] - phi_BQA[0])^2 == (phi_BPA[1] - phi_BQA[1])^2:
  phi_BQA = - phi_BQA; 

T4 = time.time();

print("Bob's isogeny computation:", T4-T3);

labelA = 4; i0 = 0;

while(labelA == 4):

  UAi=[];
  random.seed(int(2022 + i0));
  UA=generate_U(UAi,B1,ind, EB, prime_A, NB);
  random.seed(int(2023 + i0));
  VA=generate_V(B1,ind,UA,UAi, EB, prime_A, NA);
  VA = 4*NB*VA;
  
  T5 = time.time();

  print("Bob's torsion basis generation:", T5-T4);
  
  h1 = miller_affine(phi_BQA,UA,string_A,NA,B1);
  h2 = miller_affine(phi_BQA,VA,string_A,NA,B1);
  h3 = miller_affine(phi_BPA,UA,string_A,NA,B1);
  h4 = miller_affine(phi_BPA,VA,string_A,NA,B1);

  T6 = time.time();
  
  print("Bob's pairing computation:", T6-T5);
  
  hh1 = [];
  hh2 = [];
  hh3 = [];
  hh4 = [];
  h = [h1, h2, h3, h4];
  batch_cof(hh1,h[0],ind,len(ind), prime_A);
  batch_cof(hh2,h[1],ind,len(ind), prime_A);
  batch_cof(hh3,h[2],ind,len(ind), prime_A);
  batch_cof(hh4,h[3],ind,len(ind), prime_A);
  labelA4 = [0,0,0,0];
  
  for i in range(len(ind)):
      if hh4[i] == 1:
        labelA4[3] = 1; 
  for i in range(len(ind)):
      if hh3[i] == 1:
        labelA4[2] = 1;
  for i in range(len(ind)):
      if hh2[i] == 1:
        labelA4[1] = 1;
  for i in range(len(ind)):
      if hh1[i] == 1:
        labelA4[0] = 1;
  for i in range(4):
      if labelA4[i] == 0:
        labelA = i; 
  if labelA != 4:
    SA = DLC(ind, hh1, hh2, hh3, hh4, labelA, prime_A);
  else:
    i0 = i0 + 1;
  T7 = time.time();
  print("Bob's discrete logarithm computation", T7-T6);
 
labelB = 4; j0 = 0;

while(labelB == 4):
  UBi=[];
  random.seed(int(2022 + j0));
  UB=generate_U(UBi,A1,ind, EA, prime_B, NA);
  random.seed(int(2023 + j0));
  VB=generate_V(A1,ind,UB,UBi, EA, prime_B, NB);
  VB=4*NA*VB;
  T8 = time.time();

  print("Alice's torsion basis generation:", T8-T7);

  h5 = miller_affine(phi_AQB,UB,string_B,NB,A1);
  h6 = miller_affine(phi_AQB,VB,string_B,NB,A1);
  h7 = miller_affine(phi_APB,UB,string_B,NB,A1);
  h8 = miller_affine(phi_APB,VB,string_B,NB,A1);

  T9 = time.time();
  print("Alice's pairing computation:", T9-T8);

  hh5 = [];
  hh6 = [];
  hh7 = [];
  hh8 = [];
  h = [h5, h6, h7, h8];
  batch_cof(hh5,h[0],ind,len(ind),prime_B);
  batch_cof(hh6,h[1],ind,len(ind), prime_B);
  batch_cof(hh7,h[2],ind,len(ind), prime_B);
  batch_cof(hh8,h[3],ind,len(ind), prime_B);
  labelB4 = [0,0,0,0];

  for i in range(len(ind)):
	  if hh8[i] == 1:
		  labelB4[3] = 1; 

  for i in range(len(ind)):
	  if hh7[i] == 1:
		  labelB4[2] = 1; 

  for i in range(len(ind)):
	  if hh6[i] == 1:
		  labelB4[1] = 1; 


  for i in range(len(ind)):
	  if hh5[i] == 1:
		  labelB4[0] = 1; 

  for i in range(4):
      if labelB4[i] == 0:
        labelB = i;

  if labelB != 4:
    SB = DLC(ind, hh5, hh6, hh7, hh8, labelB, prime_B);     
  else:
    j0 = j0 + 1;

T10 = time.time();
print("Alice's discrete logarithm computation", T10-T9);

# Alice generates the same torsion basis with Bob.
UAi=[];
random.seed(int(2022 + i0));
UA=generate_U(UAi,B1,ind, EB, prime_A, NB);
random.seed(int(2023 + i0));
VA=generate_V(B1,ind,UA,UAi, EB, prime_A, NA);
VA = 4*NB*VA;

if labelA == 0:
  AB = msidh_action_Alice_last(B1, skA, degree_bound, UA, VA, -SA[2], -SA[0], SA[1], 1);
  
elif labelA == 1:
  AB = msidh_action_Alice_last(B1, skA, degree_bound, UA, VA, SA[2], 1, -SA[1], -SA[0]);
  
elif labelA == 2:
  AB = msidh_action_Alice_last(B1, skA, degree_bound, UA, VA, -SA[2], -SA[1], 1, SA[0]);

else:
  AB = msidh_action_Alice_last(B1, skA, degree_bound, UA, VA, 1, SA[1], -SA[2], -SA[0]);

T11 = time.time();

print("Alice's Key agreement", T11 - T10);

# Bob generates the same torsion basis with Alice.
UBi=[];
tmp_UB=UB; tmp_VB=VB;
random.seed(int(2022 + j0));
UB=generate_U(UBi,A1,ind, EA, prime_B, NA);
random.seed(int(2023 + j0));
VB=generate_V(A1,ind,UB,UBi, EA, prime_B, NB);
VB=4*NA*VB;

if labelB == 0:
  BA = msidh_action_Bob_last(A1, skB, degree_bound, UB, VB, -SB[2], -SB[0], SB[1], 1);
  
elif labelB == 1:
  BA = msidh_action_Bob_last(A1, skB, degree_bound, UB, VB, SB[2], 1, -SB[1], -SB[0]);
  
elif labelB == 2:
  BA = msidh_action_Bob_last(A1, skB, degree_bound, UB, VB, -SB[2], -SB[1], 1, SB[0]);

else:
  BA = msidh_action_Bob_last(A1, skB, degree_bound, UB, VB, 1, SB[1], -SB[2], -SB[0]);
 
T12 = time.time();

print("Bob's Key agreement", T12 - T11);

if J(AB) == J(BA):
  print("The key exchange is successful.");
else:
  print("The key exchange is unsuccessful.");





  

















